package multi

import (
	"golang-moaha-construction/internal/objectives/single"
	"testing"
)

func TestDECD(t *testing.T) {
	agents := []*MultiResult{
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.659287, 0.006957, 0.015745, 0.001263, 0.003728, 0.001729, 0.019623, 0.003749, 0.008777, 0.008555, 0.003448, 0.005515, 0.002939, 0.007006, 0.007036, 0.007417, 0.001987, 0.005122, 0.006721, 0.002794, 0.008521, 0.007699, 0.003193, 0.007575, 0.008670, 0.004670, 0.000642, 0.006508, 0.000262, 0.043734},
				Value:    []float64{0.659286629317901, 0.227464928198870},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.212394, 0.002241, 0.005072, 0.000407, 0.001201, 0.000557, 0.006322, 0.001208, 0.002828, 0.002756, 0.001111, 0.001777, 0.000947, 0.002257, 0.002267, 0.002389, 0.000640, 0.001650, 0.002165, 0.000900, 0.002745, 0.002480, 0.001029, 0.002440, 0.002793, 0.001504, 0.000207, 0.002097, 0.000085, 0.014089},
				Value:    []float64{0.212394108839969, 0.555442813140720},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.860685, 0.009082, 0.020555, 0.001648, 0.004867, 0.002258, 0.025618, 0.004894, 0.011458, 0.008555, 0.006400, 0.005515, 0.003837, 0.009146, 0.009186, 0.009682, 0.002594, 0.006686, 0.008774, 0.003648, 0.011123, 0.010051, 0.004169, 0.009889, 0.008670, 0.006096, 0.000838, 0.008496, 0.000343, 0.057094},
				Value:    []float64{0.860685151508162, 0.118176636703654},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.038852, 0.000410, 0.000928, 0.000074, 0.001724, 0.000102, 0.001156, 0.000221, 0.000517, 0.000504, 0.000289, 0.000325, 0.000173, 0.000413, 0.000415, 0.000437, 0.000117, 0.000302, 0.000396, 0.000165, 0.000502, 0.000454, 0.000188, 0.000446, 0.000511, 0.000275, 0.000038, 0.000384, 0.000015, 0.002577},
				Value:    []float64{0.0388518765457142, 0.806824693811735},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.066013, 0.000697, 0.000000, 0.000050, 0.000000, 0.000173, 0.000000, 0.000148, 0.000000, 0.000000, 0.000000, 0.000218, 0.000116, 0.000000, 0.000705, 0.000294, 0.000000, 0.000000, 0.000000, 0.000000, 0.000853, 0.000305, 0.000000, 0.000300, 0.000868, 0.000468, 0.000000, 0.000000, 0.000000, 0.000000},
				Value:    []float64{0.0660126987781702, 0.744475577944563},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.114102, 0.001204, 0.002725, 0.000000, 0.005063, 0.000299, 0.000000, 0.000000, 0.001519, 0.001481, 0.000848, 0.000955, 0.000000, 0.001213, 0.001218, 0.001284, 0.000344, 0.000886, 0.001163, 0.000484, 0.001475, 0.001332, 0.000553, 0.001089, 0.000000, 0.000808, 0.000111, 0.000000, 0.000045, 0.000000},
				Value:    []float64{0.114102477660706, 0.668943688510993},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.055294, 0.000583, 0.001321, 0.000106, 0.000313, 0.000145, 0.001646, 0.000314, 0.000736, 0.000717, 0.000289, 0.000463, 0.000247, 0.000588, 0.000590, 0.000622, 0.000167, 0.000430, 0.000564, 0.000234, 0.000715, 0.000646, 0.000268, 0.000635, 0.000727, 0.000392, 0.000054, 0.000546, 0.000022, 0.003668},
				Value:    []float64{0.0552937504749916, 0.769714363785934},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.179786, 0.001897, 0.000000, 0.000344, 0.000000, 0.000018, 0.000000, 0.001022, 0.000000, 0.000000, 0.000000, 0.001504, 0.000802, 0.000000, 0.001919, 0.002023, 0.000000, 0.000000, 0.000000, 0.000000, 0.002324, 0.002099, 0.000000, 0.002066, 0.002364, 0.001273, 0.000000, 0.000000, 0.000000, 0.000000},
				Value:    []float64{0.179785739779001, 0.580797202902654},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.173302, 0.001829, 0.000000, 0.000332, 0.000000, 0.000018, 0.000000, 0.000985, 0.002362, 0.000000, 0.000000, 0.003563, 0.000773, 0.000132, 0.001850, 0.001950, 0.000000, 0.002111, 0.001388, 0.000000, 0.002240, 0.002024, 0.000000, 0.001991, 0.002279, 0.001400, 0.000000, 0.000000, 0.000000, 0.000000},
				Value:    []float64{0.173301575504811, 0.590399260302904},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.538195, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
				Value:    []float64{0.538195324588409, 0.266382030898636},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.662180, 0.002964, 0.001147, 0.011263, 0.003152, 0.005168, 0.008690, 0.000000, 0.002084, 0.003961, 0.002704, 0.000799, 0.000000, 0.010535, 0.000000, 0.000922, 0.001092, 0.010180, 0.000427, 0.007587, 0.010614, 0.000000, 0.000000, 0.002803, 0.000000, 0.005905, 0.003716, 0.000000, 0.005921, 0.003761},
				Value:    []float64{0.662179982252720, 0.205763294342196},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.007843, 0.002964, 0.001147, 0.011263, 0.003152, 0.005168, 0.008690, 0.000000, 0.002084, 0.003961, 0.002704, 0.000799, 0.000000, 0.010535, 0.000000, 0.000922, 0.001092, 0.010180, 0.000427, 0.007587, 0.007150, 0.000000, 0.000000, 0.002803, 0.000000, 0.005905, 0.003716, 0.000000, 0.005921, 0.003761},
				Value:    []float64{0.00784314495447934, 0.941682757081262},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.162868, 0.001719, 0.003890, 0.000312, 0.007226, 0.000427, 0.004848, 0.000926, 0.002168, 0.002113, 0.001211, 0.001362, 0.000726, 0.001731, 0.001738, 0.001832, 0.000491, 0.001265, 0.001660, 0.000690, 0.002105, 0.001902, 0.000789, 0.001555, 0.002142, 0.001154, 0.000159, 0.001608, 0.000065, 0.010804},
				Value:    []float64{0.162867994264164, 0.610968348073376},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
				Value:    []float64{0, 1},
			},
		},
	}

	agents = DECD(agents, 4)

	// check agents length == 10
	if len(agents) != 10 {
		t.Errorf("Expected agents length to be 10, got %d", len(agents))
	}

	// check values of each agent equal to this matrix
	/* [0.212394108839969;0.555442813140720]
	   [0.860685151508162;0.118176636703654]
	   [0.0388518765457142;0.806824693811735]
	   [0.0660126987781702;0.744475577944563]
	   [0.114102477660706;0.668943688510993]
	   [0.538195324588409;0.266382030898636]
	   [0.662179982252720;0.205763294342196]
	   [0.00784314495447934;0.941682757081262]
	   [0.162867994264164;0.610968348073376]
	   [0;1]
	*/
	matrix := [][]float64{
		{0.212394108839969, 0.555442813140720},
		{0.860685151508162, 0.118176636703654},
		{0.0388518765457142, 0.806824693811735},
		{0.0660126987781702, 0.744475577944563},
		{0.114102477660706, 0.668943688510993},
		{0.538195324588409, 0.266382030898636},
		{0.662179982252720, 0.205763294342196},
		{0.00784314495447934, 0.941682757081262},
		{0.162867994264164, 0.610968348073376},
		{0, 1},
	}

	for i := 0; i < 10; i++ {
		for j := 0; j < 2; j++ {
			if agents[i].Value[j] != matrix[i][j] {
				t.Errorf("Expected value of agent %d at obj %d to be %f, got %f", i, j, matrix[i][j], agents[i].Value[j])
			}
		}

	}
}
