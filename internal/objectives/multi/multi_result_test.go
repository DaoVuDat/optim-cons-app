package multi

import (
	"golang-moaha-construction/internal/objectives/single"
	"testing"
)

var positions = [][]float64{
	{0.379605, 0.319068, 0.986051, 0.718181, 0.413183, 0.098630, 0.734559, 0.637306, 0.073842, 0.120508, 0.981596, 0.496799, 0.022414, 0.053832, 0.140874, 0.893474, 0.465820, 0.560857, 0.494456, 0.067785, 0.897647, 0.288565, 0.269047, 0.594194, 0.475879, 0.368311, 0.655611, 0.938200, 0.620425, 0.282840},
	{0.205181, 0.439134, 0.027250, 0.876184, 0.610092, 0.203592, 0.519917, 0.053824, 0.862187, 0.442935, 0.548009, 0.566861, 0.680395, 0.371379, 0.078229, 0.456351, 0.047844, 0.738257, 0.038002, 0.954244, 0.742372, 0.937450, 0.513364, 0.240905, 0.259965, 0.758974, 0.993343, 0.356706, 0.752858, 0.110048},
	{0.597045, 0.430595, 0.730718, 0.261176, 0.094808, 0.450963, 0.640075, 0.132039, 0.452822, 0.652200, 0.826998, 0.308077, 0.402364, 0.884231, 0.700580, 0.241872, 0.759832, 0.290926, 0.277439, 0.006108, 0.374711, 0.436933, 0.304298, 0.290860, 0.242516, 0.936684, 0.860190, 0.397228, 0.479419, 0.564996},
	{0.489619, 0.269812, 0.989740, 0.183676, 0.861657, 0.032633, 0.331958, 0.748747, 0.644366, 0.169238, 0.952205, 0.543270, 0.251413, 0.578572, 0.915477, 0.895597, 0.482507, 0.442740, 0.311755, 0.055314, 0.753792, 0.131947, 0.355922, 0.395871, 0.885521, 0.021240, 0.844081, 0.288071, 0.250343, 0.488380},
	{0.729036, 0.202616, 0.216276, 0.976335, 0.593236, 0.304404, 0.967703, 0.895970, 0.190025, 0.001799, 0.711764, 0.867727, 0.118308, 0.039023, 0.598195, 0.604314, 0.516432, 0.007507, 0.688933, 0.946020, 0.873536, 0.113276, 0.354569, 0.241937, 0.560333, 0.612727, 0.300809, 0.798142, 0.795642, 0.781092},
	{0.351098, 0.054297, 0.708705, 0.992928, 0.162476, 0.113566, 0.912875, 0.481657, 0.851806, 0.809914, 0.186760, 0.247200, 0.054189, 0.608961, 0.777232, 0.511064, 0.027750, 0.990385, 0.500940, 0.331997, 0.173883, 0.625636, 0.575135, 0.750985, 0.153519, 0.356787, 0.143951, 0.850608, 0.337870, 0.275196},
	{0.006011, 0.801912, 0.497408, 0.537843, 0.870913, 0.722844, 0.668086, 0.178828, 0.550495, 0.959875, 0.596022, 0.808571, 0.984532, 0.885924, 0.213837, 0.034630, 0.451124, 0.013795, 0.473711, 0.951197, 0.248952, 0.386423, 0.431433, 0.830886, 0.824647, 0.452999, 0.380560, 0.925869, 0.740844, 0.737633},
	{0.946916, 0.510100, 0.791879, 0.452174, 0.849199, 0.390431, 0.738377, 0.976439, 0.523299, 0.429915, 0.207158, 0.323401, 0.110870, 0.375210, 0.329904, 0.342105, 0.817119, 0.531685, 0.521122, 0.774310, 0.120263, 0.625450, 0.346649, 0.334619, 0.574617, 0.863938, 0.198563, 0.672451, 0.901831, 0.199157},
	{0.298284, 0.496520, 0.889904, 0.501415, 0.276995, 0.533958, 0.574250, 0.412804, 0.014764, 0.702765, 0.506747, 0.381266, 0.064932, 0.358580, 0.234251, 0.203504, 0.813780, 0.393435, 0.053575, 0.375052, 0.774994, 0.165298, 0.912219, 0.319206, 0.329780, 0.204236, 0.767215, 0.069973, 0.950034, 0.158210},
	{0.286446, 0.687129, 0.141150, 0.512087, 0.721327, 0.928845, 0.732104, 0.749848, 0.407320, 0.239492, 0.520850, 0.219077, 0.842388, 0.662933, 0.816235, 0.793878, 0.469105, 0.309525, 0.687579, 0.986852, 0.769934, 0.829581, 0.706085, 0.595336, 0.752874, 0.496722, 0.865133, 0.068028, 0.968546, 0.098756},
	{0.546977, 0.402970, 0.107040, 0.724166, 0.613682, 0.782968, 0.566621, 0.811319, 0.576776, 0.944029, 0.871452, 0.507602, 0.788823, 0.473031, 0.828802, 0.322482, 0.976147, 0.278211, 0.072831, 0.751224, 0.831189, 0.922338, 0.327024, 0.804069, 0.538250, 0.463295, 0.820750, 0.951907, 0.076273, 0.708671},
	{0.234926, 0.398896, 0.268124, 0.832513, 0.995374, 0.649751, 0.703953, 0.932303, 0.687653, 0.568354, 0.380848, 0.634579, 0.363229, 0.407619, 0.368700, 0.468399, 0.503414, 0.910536, 0.206431, 0.338604, 0.574126, 0.486932, 0.262219, 0.579593, 0.878328, 0.060950, 0.440876, 0.084258, 0.563238, 0.539311},
	{0.768058, 0.233090, 0.587362, 0.458974, 0.860982, 0.660836, 0.353879, 0.347186, 0.253718, 0.952528, 0.298201, 0.158406, 0.361297, 0.741629, 0.705900, 0.700892, 0.006226, 0.374346, 0.901496, 0.318345, 0.597083, 0.297795, 0.125014, 0.388356, 0.817688, 0.981176, 0.861990, 0.083821, 0.337712, 0.236129},
	{0.317805, 0.984448, 0.548251, 0.749251, 0.841852, 0.166890, 0.903098, 0.105124, 0.745093, 0.729372, 0.717470, 0.133432, 0.445789, 0.508787, 0.530490, 0.859717, 0.677725, 0.805838, 0.531243, 0.955896, 0.066677, 0.541518, 0.281660, 0.480900, 0.684864, 0.208258, 0.608161, 0.326176, 0.880847, 0.133395},
	{0.102408, 0.959117, 0.152902, 0.152538, 0.155553, 0.089569, 0.454425, 0.668896, 0.831302, 0.790235, 0.712711, 0.472598, 0.708588, 0.958059, 0.505776, 0.305053, 0.789811, 0.236387, 0.234303, 0.464699, 0.619387, 0.615329, 0.122624, 0.123794, 0.284459, 0.735733, 0.411308, 0.828982, 0.935114, 0.399067},
	{0.052211, 0.571186, 0.747670, 0.320244, 0.492934, 0.221653, 0.939274, 0.482305, 0.539996, 0.221057, 0.095945, 0.060165, 0.819509, 0.771478, 0.195696, 0.895118, 0.684300, 0.656846, 0.990381, 0.033692, 0.424253, 0.489984, 0.583504, 0.083270, 0.660155, 0.052305, 0.556831, 0.712025, 0.487911, 0.617601},
	{0.213778, 0.645659, 0.380642, 0.103713, 0.377512, 0.262861, 0.241286, 0.622924, 0.522928, 0.413238, 0.217792, 0.858554, 0.861008, 0.283939, 0.615393, 0.779490, 0.954847, 0.919603, 0.384816, 0.162643, 0.796751, 0.113817, 0.158824, 0.355828, 0.847759, 0.582781, 0.586178, 0.925838, 0.575078, 0.009977},
	{0.809377, 0.608808, 0.479914, 0.268440, 0.258096, 0.481010, 0.227341, 0.048602, 0.169242, 0.258446, 0.197910, 0.605693, 0.823704, 0.810615, 0.802237, 0.708113, 0.859378, 0.781085, 0.203797, 0.993343, 0.093625, 0.650619, 0.215177, 0.243873, 0.339688, 0.197862, 0.506833, 0.950758, 0.394607, 0.584465},
	{0.606537, 0.714643, 0.401536, 0.858691, 0.920485, 0.750839, 0.285592, 0.796816, 0.142766, 0.504550, 0.610688, 0.703797, 0.383340, 0.728683, 0.887285, 0.055848, 0.138216, 0.863065, 0.421746, 0.411314, 0.959141, 0.750245, 0.980997, 0.233516, 0.096227, 0.384582, 0.500273, 0.570256, 0.976632, 0.492855},
	{0.400883, 0.994990, 0.260998, 0.665325, 0.964257, 0.671151, 0.299175, 0.531127, 0.001463, 0.883789, 0.404384, 0.301206, 0.950582, 0.460648, 0.287648, 0.084627, 0.582181, 0.153069, 0.073094, 0.580565, 0.287015, 0.361920, 0.724825, 0.858312, 0.347916, 0.961746, 0.953569, 0.206037, 0.768245, 0.615532},
	{0.918922, 0.602537, 0.702138, 0.743675, 0.385102, 0.251504, 0.036760, 0.472123, 0.645072, 0.278970, 0.517861, 0.245667, 0.297508, 0.650474, 0.891393, 0.861106, 0.209915, 0.399094, 0.887883, 0.256528, 0.966802, 0.619157, 0.165346, 0.826199, 0.655693, 0.546453, 0.251329, 0.040156, 0.233375, 0.361113},
	{0.633455, 0.986098, 0.207157, 0.757084, 0.886328, 0.472230, 0.158914, 0.810921, 0.476508, 0.116288, 0.875721, 0.635186, 0.097281, 0.908439, 0.035016, 0.039750, 0.988568, 0.686182, 0.376689, 0.504324, 0.763496, 0.048875, 0.725928, 0.701328, 0.458891, 0.582295, 0.339090, 0.170625, 0.399193, 0.919777},
	{0.226045, 0.361007, 0.324562, 0.083582, 0.512666, 0.832865, 0.904613, 0.723596, 0.382996, 0.298017, 0.691712, 0.880457, 0.924548, 0.081253, 0.482673, 0.128265, 0.252911, 0.883962, 0.196277, 0.121354, 0.543695, 0.314621, 0.382041, 0.791539, 0.839179, 0.680236, 0.416922, 0.642890, 0.214081, 0.617271},
	{0.675191, 0.601023, 0.346310, 0.364401, 0.171481, 0.795362, 0.492667, 0.354623, 0.775061, 0.236805, 0.844833, 0.816527, 0.846228, 0.370187, 0.383230, 0.861335, 0.463909, 0.570548, 0.695307, 0.960917, 0.546313, 0.636577, 0.570892, 0.927112, 0.863766, 0.169839, 0.178699, 0.243504, 0.751779, 0.199134},
	{0.982941, 0.709639, 0.175436, 0.858297, 0.909411, 0.961663, 0.570600, 0.562879, 0.176661, 0.513679, 0.548472, 0.165277, 0.493893, 0.535117, 0.198807, 0.623169, 0.026315, 0.318791, 0.533000, 0.326774, 0.602190, 0.361933, 0.134921, 0.913814, 0.640559, 0.658774, 0.675330, 0.744558, 0.842178, 0.516657},
	{0.151869, 0.380664, 0.821019, 0.171364, 0.329975, 0.966472, 0.806293, 0.222188, 0.999773, 0.063739, 0.425483, 0.404338, 0.400293, 0.111923, 0.424311, 0.613546, 0.988061, 0.219901, 0.354081, 0.266242, 0.291498, 0.188390, 0.022860, 0.449404, 0.243640, 0.868727, 0.528611, 0.914135, 0.973930, 0.585426},
	{0.118975, 0.926533, 0.593561, 0.883615, 0.424476, 0.607257, 0.070764, 0.924772, 0.642079, 0.104500, 0.700225, 0.395804, 0.084905, 0.214479, 0.248799, 0.226653, 0.703004, 0.754153, 0.547287, 0.553483, 0.630573, 0.985457, 0.634278, 0.600456, 0.909187, 0.570837, 0.335420, 0.957139, 0.439923, 0.601543},
	{0.720262, 0.678778, 0.212759, 0.081623, 0.274479, 0.867518, 0.559357, 0.464628, 0.430301, 0.773986, 0.653920, 0.657729, 0.161021, 0.432377, 0.505086, 0.375332, 0.480372, 0.342421, 0.777146, 0.383944, 0.711556, 0.480933, 0.729180, 0.937559, 0.517254, 0.903069, 0.218193, 0.873219, 0.082693, 0.465403},
	{0.021930, 0.808281, 0.179210, 0.165392, 0.181603, 0.691437, 0.213764, 0.298105, 0.768335, 0.501150, 0.909465, 0.057853, 0.436752, 0.572255, 0.565067, 0.823817, 0.126099, 0.300117, 0.002122, 0.951107, 0.766299, 0.751304, 0.138865, 0.349320, 0.151341, 0.496721, 0.808652, 0.632869, 0.688401, 0.639570},
	{0.729322, 0.859846, 0.626955, 0.180591, 0.573307, 0.163566, 0.906052, 0.077343, 0.338535, 0.580618, 0.475235, 0.805320, 0.530778, 0.227310, 0.709485, 0.148633, 0.658116, 0.633983, 0.229306, 0.182228, 0.166353, 0.149607, 0.202747, 0.954959, 0.015908, 0.957514, 0.025692, 0.971111, 0.297596, 0.525073},
	{0.862339, 0.896405, 0.189011, 0.660720, 0.941231, 0.975707, 0.107935, 0.178899, 0.746551, 0.049469, 0.071285, 0.489126, 0.849894, 0.997041, 0.004393, 0.542607, 0.861348, 0.909139, 0.845351, 0.878873, 0.746182, 0.117489, 0.509022, 0.168832, 0.831112, 0.928011, 0.169484, 0.883737, 0.387863, 0.382569},
	{0.271453, 0.867883, 0.741502, 0.447873, 0.709639, 0.944331, 0.174118, 0.244596, 0.640929, 0.808613, 0.853371, 0.398118, 0.115494, 0.080281, 0.360468, 0.828906, 0.214610, 0.791040, 0.654688, 0.026146, 0.785776, 0.922563, 0.492313, 0.834012, 0.131354, 0.759783, 0.925736, 0.832708, 0.259401, 0.213022},
	{0.522315, 0.397357, 0.479110, 0.993904, 0.604478, 0.944909, 0.490442, 0.437947, 0.772656, 0.744067, 0.442904, 0.053000, 0.087822, 0.797986, 0.655582, 0.032336, 0.557067, 0.719802, 0.110408, 0.216647, 0.811020, 0.138662, 0.881899, 0.923556, 0.012756, 0.377159, 0.167812, 0.540223, 0.101662, 0.039268},
	{0.933229, 0.971592, 0.360928, 0.644205, 0.067947, 0.207912, 0.039604, 0.469359, 0.150097, 0.991307, 0.427062, 0.955372, 0.724247, 0.580892, 0.540258, 0.705441, 0.005029, 0.782516, 0.926860, 0.008296, 0.824628, 0.767336, 0.997137, 0.227653, 0.919542, 0.641999, 0.105320, 0.268161, 0.763844, 0.805510},
	{0.104253, 0.469759, 0.219062, 0.922708, 0.320323, 0.857544, 0.259847, 0.878063, 0.188268, 0.759194, 0.031689, 0.642339, 0.566871, 0.376410, 0.212548, 0.792157, 0.145443, 0.489142, 0.012846, 0.186612, 0.485230, 0.838226, 0.141057, 0.732217, 0.691067, 0.034493, 0.488857, 0.971390, 0.112451, 0.743214},
	{0.638541, 0.594183, 0.498623, 0.567853, 0.426504, 0.076239, 0.290587, 0.561335, 0.633333, 0.930776, 0.977769, 0.093597, 0.661735, 0.602773, 0.473818, 0.356256, 0.475578, 0.671022, 0.959645, 0.089084, 0.797742, 0.590776, 0.912197, 0.101129, 0.293295, 0.051588, 0.504128, 0.768376, 0.282985, 0.225360},
	{0.331290, 0.453251, 0.737385, 0.509886, 0.382514, 0.905483, 0.965258, 0.628267, 0.132031, 0.618302, 0.383020, 0.991194, 0.286827, 0.706191, 0.535206, 0.193211, 0.689435, 0.050455, 0.184434, 0.045658, 0.885042, 0.839794, 0.118155, 0.410415, 0.120229, 0.572093, 0.949390, 0.256385, 0.989865, 0.349808},
	{0.208522, 0.665827, 0.973345, 0.622700, 0.063538, 0.373510, 0.166252, 0.231278, 0.052209, 0.901756, 0.793292, 0.373014, 0.832055, 0.753835, 0.621863, 0.394093, 0.359278, 0.088852, 0.341677, 0.548671, 0.460547, 0.645452, 0.513521, 0.814426, 0.097183, 0.463714, 0.589817, 0.187172, 0.611330, 0.051942},
	{0.575727, 0.842345, 0.499726, 0.439025, 0.149057, 0.028279, 0.756670, 0.796106, 0.293556, 0.115207, 0.375092, 0.828894, 0.841777, 0.665238, 0.960140, 0.943118, 0.112699, 0.648287, 0.480804, 0.066521, 0.897771, 0.497230, 0.771303, 0.060362, 0.262457, 0.651069, 0.133604, 0.638546, 0.384943, 0.765698},
	{0.652916, 0.381489, 0.300019, 0.340140, 0.918927, 0.456267, 0.442497, 0.454186, 0.945282, 0.219119, 0.882403, 0.019875, 0.341765, 0.766027, 0.342804, 0.618806, 0.453021, 0.010163, 0.599081, 0.601568, 0.649417, 0.342721, 0.493299, 0.701774, 0.887803, 0.055058, 0.098362, 0.649783, 0.764071, 0.987959},
	{0.125325, 0.364477, 0.676230, 0.375758, 0.863458, 0.291977, 0.133475, 0.672651, 0.202585, 0.868515, 0.751157, 0.419380, 0.000231, 0.149464, 0.273834, 0.872425, 0.601251, 0.321188, 0.284293, 0.435316, 0.903759, 0.925106, 0.505292, 0.627582, 0.719264, 0.023913, 0.574933, 0.046534, 0.422531, 0.467734},
	{0.022628, 0.065074, 0.923956, 0.534143, 0.366796, 0.363946, 0.151374, 0.149609, 0.350802, 0.335966, 0.784028, 0.486739, 0.464798, 0.131253, 0.886391, 0.674557, 0.835160, 0.656488, 0.983917, 0.979790, 0.250153, 0.624571, 0.728242, 0.498170, 0.849828, 0.190918, 0.124144, 0.002790, 0.152953, 0.534161},
	{0.510634, 0.385216, 0.310596, 0.003555, 0.815242, 0.638418, 0.448339, 0.244086, 0.803385, 0.823971, 0.852191, 0.467252, 0.970699, 0.841244, 0.078548, 0.237599, 0.817571, 0.405829, 0.466312, 0.951536, 0.965005, 0.765285, 0.574534, 0.915925, 0.495432, 0.166012, 0.325998, 0.296436, 0.558298, 0.067477},
	{0.068978, 0.166785, 0.947438, 0.811088, 0.710456, 0.970246, 0.998427, 0.987455, 0.150087, 0.958479, 0.530459, 0.074087, 0.311821, 0.895171, 0.834768, 0.002349, 0.640210, 0.803183, 0.245131, 0.064122, 0.263148, 0.102720, 0.483719, 0.418884, 0.381289, 0.886765, 0.420558, 0.283848, 0.048181, 0.219166},
	{0.239176, 0.029258, 0.702311, 0.007636, 0.610921, 0.408090, 0.248947, 0.652460, 0.320277, 0.103672, 0.535565, 0.164870, 0.883439, 0.666457, 0.847742, 0.762661, 0.807014, 0.632952, 0.710427, 0.688664, 0.320948, 0.531648, 0.873194, 0.054540, 0.500401, 0.432763, 0.904282, 0.630183, 0.983036, 0.585200},
	{0.840637, 0.468814, 0.545222, 0.179104, 0.634462, 0.962959, 0.534014, 0.479614, 0.793666, 0.092714, 0.880800, 0.003874, 0.511529, 0.678464, 0.565748, 0.478459, 0.320513, 0.601580, 0.913153, 0.682518, 0.946733, 0.099089, 0.511029, 0.110128, 0.545262, 0.688786, 0.147417, 0.777561, 0.399051, 0.898300},
	{0.307044, 0.061051, 0.219471, 0.082833, 0.950395, 0.016371, 0.114668, 0.012410, 0.216227, 0.011428, 0.642449, 0.516991, 0.245542, 0.193747, 0.090871, 0.368442, 0.007793, 0.602701, 0.478855, 0.308118, 0.744444, 0.839349, 0.262432, 0.514238, 0.446774, 0.341211, 0.839142, 0.982493, 0.626465, 0.181275},
	{0.123017, 0.579969, 0.328536, 0.268186, 0.550239, 0.180517, 0.678492, 0.055688, 0.034057, 0.286518, 0.077390, 0.900572, 0.846606, 0.395698, 0.169215, 0.430452, 0.416218, 0.728763, 0.406474, 0.951807, 0.911985, 0.951414, 0.346001, 0.290244, 0.886701, 0.210031, 0.130877, 0.520516, 0.905463, 0.402530},
	{0.215761, 0.078739, 0.933060, 0.602872, 0.377492, 0.664931, 0.792190, 0.333492, 0.692659, 0.203816, 0.958714, 0.711832, 0.166907, 0.442777, 0.632994, 0.929967, 0.529331, 0.626474, 0.680819, 0.923198, 0.152834, 0.405721, 0.312476, 0.693899, 0.890688, 0.490671, 0.805824, 0.326439, 0.549879, 0.388784},
	{0.896829, 0.676120, 0.828397, 0.110089, 0.279227, 0.767636, 0.216057, 0.034062, 0.436552, 0.936864, 0.262089, 0.569745, 0.359553, 0.026839, 0.500419, 0.827015, 0.258982, 0.045885, 0.246472, 0.660732, 0.329410, 0.659496, 0.013004, 0.718068, 0.391119, 0.033505, 0.406015, 0.716308, 0.921336, 0.984016},
	{0.983421, 0.896306, 0.865703, 0.800961, 0.554979, 0.418872, 0.127123, 0.654621, 0.863965, 0.274598, 0.840164, 0.070755, 0.378792, 0.268169, 0.152921, 0.631000, 0.316375, 0.959112, 0.498674, 0.738609, 0.012756, 0.605353, 0.576451, 0.807379, 0.654968, 0.878228, 0.902373, 0.152233, 0.192580, 0.790976},
	{0.060705, 0.389827, 0.299966, 0.734180, 0.104209, 0.792575, 0.782729, 0.532398, 0.253352, 0.070955, 0.625803, 0.024681, 0.062042, 0.129612, 0.450614, 0.672336, 0.856111, 0.498445, 0.048785, 0.313832, 0.641631, 0.786387, 0.289150, 0.497868, 0.818435, 0.595128, 0.536425, 0.330873, 0.411690, 0.794006},
	{0.343208, 0.462607, 0.367824, 0.679571, 0.567779, 0.651777, 0.491114, 0.398458, 0.477484, 0.066588, 0.411028, 0.969092, 0.780721, 0.729018, 0.765651, 0.756581, 0.843270, 0.770157, 0.978661, 0.111359, 0.396077, 0.492061, 0.258095, 0.036966, 0.974381, 0.726426, 0.147965, 0.147895, 0.704824, 0.380994},
	{0.076411, 0.410840, 0.142991, 0.798920, 0.930248, 0.004719, 0.650041, 0.678532, 0.253623, 0.843181, 0.293959, 0.026860, 0.093307, 0.797885, 0.711403, 0.783407, 0.623923, 0.825415, 0.035023, 0.405475, 0.249669, 0.480897, 0.880839, 0.280685, 0.599143, 0.026226, 0.155199, 0.833911, 0.194893, 0.829788},
	{0.338075, 0.671117, 0.052366, 0.734309, 0.499482, 0.943300, 0.289772, 0.376560, 0.113755, 0.964851, 0.432512, 0.084563, 0.716676, 0.506787, 0.328088, 0.753524, 0.836006, 0.253716, 0.534425, 0.435165, 0.157704, 0.600481, 0.937451, 0.107759, 0.899981, 0.550465, 0.427357, 0.152381, 0.247546, 0.447369},
	{0.532783, 0.354651, 0.773115, 0.881681, 0.734092, 0.406432, 0.604179, 0.641105, 0.127467, 0.496192, 0.310469, 0.578574, 0.943609, 0.426940, 0.033128, 0.929434, 0.924982, 0.358307, 0.259989, 0.786860, 0.511582, 0.562527, 0.684794, 0.092397, 0.872579, 0.942938, 0.096594, 0.845883, 0.909396, 0.011341},
	{0.523683, 0.650345, 0.385145, 0.649302, 0.762853, 0.575686, 0.631919, 0.278204, 0.839836, 0.426835, 0.631622, 0.833467, 0.270185, 0.400801, 0.554255, 0.443865, 0.090384, 0.744381, 0.032615, 0.429743, 0.037262, 0.975798, 0.522340, 0.909630, 0.383248, 0.884452, 0.255018, 0.909050, 0.894560, 0.398517},
	{0.625020, 0.567597, 0.894512, 0.214166, 0.003859, 0.880581, 0.235122, 0.244865, 0.640917, 0.304524, 0.825621, 0.883689, 0.945373, 0.390795, 0.801320, 0.157113, 0.625165, 0.698985, 0.085869, 0.531180, 0.888567, 0.263666, 0.234786, 0.839657, 0.495540, 0.152366, 0.230768, 0.657954, 0.562948, 0.291829},
	{0.622305, 0.715905, 0.280731, 0.412273, 0.362206, 0.781392, 0.135487, 0.902070, 0.289636, 0.499558, 0.783590, 0.677062, 0.149812, 0.696619, 0.129013, 0.945946, 0.886412, 0.515005, 0.679409, 0.976793, 0.125460, 0.752243, 0.827052, 0.781430, 0.190883, 0.428641, 0.014457, 0.325285, 0.134702, 0.450517},
	{0.572275, 0.792023, 0.419737, 0.532537, 0.925704, 0.899082, 0.544833, 0.901124, 0.051827, 0.808603, 0.334905, 0.228683, 0.822402, 0.348235, 0.165471, 0.028134, 0.955370, 0.680291, 0.860562, 0.939094, 0.680194, 0.917424, 0.256692, 0.885618, 0.920043, 0.300063, 0.073391, 0.767399, 0.084952, 0.728764},
	{0.447890, 0.651249, 0.169502, 0.531449, 0.633801, 0.014096, 0.470371, 0.886326, 0.114028, 0.442541, 0.659548, 0.294773, 0.950368, 0.694286, 0.206807, 0.554762, 0.879278, 0.557858, 0.752334, 0.894901, 0.841844, 0.130857, 0.189154, 0.153640, 0.028902, 0.009085, 0.596452, 0.609049, 0.918923, 0.733574},
	{0.301147, 0.495574, 0.258163, 0.732854, 0.116761, 0.746042, 0.809789, 0.745234, 0.337143, 0.584325, 0.468952, 0.087265, 0.828717, 0.685945, 0.267325, 0.969484, 0.183774, 0.299941, 0.411185, 0.236489, 0.195055, 0.705379, 0.180548, 0.522333, 0.296172, 0.462782, 0.925232, 0.215889, 0.001009, 0.906606},
	{0.680042, 0.514952, 0.522069, 0.102919, 0.996880, 0.358969, 0.625243, 0.393367, 0.007662, 0.545285, 0.509110, 0.246779, 0.045395, 0.841730, 0.048250, 0.316320, 0.783419, 0.972400, 0.586464, 0.778044, 0.727697, 0.650987, 0.664615, 0.938780, 0.535081, 0.398440, 0.670458, 0.440534, 0.132874, 0.439204},
	{0.547643, 0.395136, 0.398272, 0.751349, 0.522350, 0.490433, 0.088679, 0.250852, 0.447559, 0.637961, 0.709445, 0.992620, 0.932195, 0.092229, 0.953540, 0.162796, 0.970455, 0.597007, 0.240227, 0.070295, 0.300041, 0.813545, 0.076710, 0.354473, 0.132011, 0.158180, 0.062147, 0.701843, 0.086482, 0.616787},
	{0.173772, 0.651401, 0.498696, 0.284511, 0.830560, 0.818360, 0.938169, 0.000326, 0.640389, 0.007356, 0.106421, 0.106794, 0.367109, 0.239608, 0.346140, 0.249620, 0.387064, 0.421038, 0.640077, 0.787553, 0.269994, 0.843982, 0.740468, 0.826102, 0.182192, 0.065436, 0.610350, 0.701553, 0.111618, 0.095824},
	{0.597834, 0.812233, 0.814578, 0.089437, 0.731279, 0.903857, 0.452232, 0.070688, 0.241278, 0.731865, 0.040492, 0.424523, 0.540215, 0.953828, 0.208906, 0.116332, 0.646220, 0.108411, 0.983497, 0.248344, 0.606356, 0.816695, 0.830054, 0.489039, 0.760728, 0.915108, 0.900975, 0.214238, 0.547061, 0.784709},
	{0.194441, 0.746889, 0.475558, 0.583259, 0.260548, 0.084822, 0.298133, 0.917129, 0.470518, 0.269468, 0.762970, 0.772172, 0.021300, 0.879986, 0.798170, 0.324165, 0.669044, 0.296294, 0.929952, 0.281960, 0.168880, 0.745167, 0.477134, 0.653445, 0.966576, 0.313027, 0.076439, 0.791415, 0.365384, 0.585099},
	{0.183337, 0.076919, 0.153663, 0.826876, 0.300957, 0.383884, 0.650749, 0.817371, 0.766266, 0.374176, 0.189862, 0.646502, 0.003605, 0.282888, 0.638601, 0.592075, 0.325289, 0.988951, 0.123236, 0.735877, 0.156617, 0.434647, 0.832243, 0.359910, 0.076238, 0.556926, 0.273930, 0.132055, 0.699655, 0.485905},
	{0.182716, 0.101215, 0.201584, 0.134746, 0.323789, 0.950545, 0.532131, 0.247686, 0.437276, 0.669088, 0.547696, 0.609054, 0.863135, 0.380696, 0.748956, 0.156697, 0.058124, 0.339707, 0.817176, 0.377548, 0.972605, 0.605319, 0.338236, 0.927984, 0.898425, 0.850706, 0.256792, 0.285496, 0.779947, 0.701395},
	{0.492512, 0.967668, 0.476161, 0.994906, 0.490579, 0.503453, 0.768773, 0.388084, 0.453259, 0.132854, 0.758506, 0.565237, 0.648637, 0.798058, 0.220448, 0.857891, 0.904729, 0.292020, 0.725870, 0.339446, 0.272681, 0.170275, 0.664018, 0.535852, 0.829109, 0.267362, 0.176156, 0.431186, 0.475655, 0.785221},
	{0.130652, 0.051356, 0.627506, 0.029088, 0.136195, 0.694556, 0.515679, 0.542582, 0.808484, 0.793686, 0.501867, 0.276632, 0.119665, 0.886598, 0.970289, 0.942526, 0.638128, 0.090590, 0.074708, 0.182451, 0.031688, 0.724936, 0.144159, 0.635927, 0.789848, 0.566253, 0.377414, 0.821586, 0.304881, 0.319373},
	{0.784980, 0.503736, 0.260997, 0.732476, 0.162950, 0.921075, 0.222223, 0.083609, 0.073702, 0.769552, 0.817677, 0.740426, 0.758249, 0.961195, 0.466425, 0.786996, 0.422568, 0.943730, 0.001314, 0.981268, 0.570194, 0.346471, 0.557503, 0.299785, 0.159073, 0.665256, 0.684203, 0.792409, 0.348624, 0.250075},
	{0.345003, 0.328633, 0.927486, 0.756072, 0.288239, 0.606180, 0.766029, 0.846152, 0.901981, 0.595707, 0.068536, 0.218043, 0.869408, 0.414218, 0.661209, 0.783485, 0.247886, 0.554425, 0.229585, 0.006913, 0.766639, 0.021833, 0.393103, 0.252540, 0.204217, 0.662279, 0.914742, 0.006903, 0.746423, 0.799671},
	{0.907799, 0.974574, 0.119863, 0.518970, 0.821975, 0.637023, 0.953910, 0.946926, 0.966605, 0.067344, 0.437535, 0.320840, 0.134052, 0.134585, 0.805948, 0.524764, 0.944257, 0.988340, 0.409894, 0.371188, 0.226854, 0.446031, 0.266221, 0.459096, 0.432905, 0.259623, 0.133715, 0.419228, 0.506861, 0.324325},
	{0.684689, 0.443094, 0.435663, 0.793024, 0.815556, 0.752113, 0.789256, 0.501267, 0.555182, 0.630750, 0.097989, 0.245676, 0.615725, 0.304960, 0.766968, 0.267229, 0.039506, 0.296562, 0.556365, 0.969074, 0.689125, 0.717881, 0.559029, 0.533354, 0.875724, 0.393099, 0.458067, 0.208245, 0.757273, 0.546692},
	{0.357388, 0.700998, 0.109222, 0.006611, 0.597302, 0.659176, 0.580006, 0.909952, 0.636006, 0.525561, 0.259623, 0.051171, 0.731950, 0.164291, 0.280397, 0.259427, 0.547096, 0.541268, 0.788113, 0.869606, 0.787541, 0.969428, 0.180468, 0.930599, 0.045152, 0.240646, 0.008855, 0.671594, 0.904813, 0.572416},
	{0.155461, 0.502367, 0.567733, 0.188272, 0.324196, 0.716037, 0.552929, 0.142282, 0.380364, 0.396569, 0.576742, 0.019402, 0.577580, 0.932196, 0.106873, 0.732150, 0.970523, 0.608886, 0.719666, 0.302752, 0.459022, 0.048029, 0.385352, 0.361716, 0.287584, 0.816713, 0.450528, 0.806633, 0.790173, 0.282958},
	{0.068309, 0.054931, 0.637523, 0.424286, 0.905531, 0.417321, 0.154058, 0.539999, 0.937091, 0.660955, 0.394657, 0.258991, 0.847912, 0.945056, 0.377000, 0.067280, 0.181582, 0.575748, 0.185885, 0.291448, 0.461664, 0.346977, 0.318166, 0.459915, 0.235895, 0.027752, 0.658453, 0.158804, 0.802663, 0.408580},
	{0.327392, 0.746015, 0.746352, 0.173955, 0.117545, 0.174038, 0.627409, 0.841890, 0.510083, 0.165764, 0.714305, 0.907037, 0.218538, 0.870961, 0.211836, 0.836665, 0.859302, 0.523377, 0.477363, 0.889883, 0.065076, 0.509456, 0.620798, 0.733567, 0.229996, 0.021872, 0.138989, 0.769507, 0.969765, 0.386794},
	{0.993428, 0.326393, 0.137161, 0.384754, 0.562636, 0.633835, 0.541606, 0.314993, 0.159327, 0.152616, 0.136951, 0.709803, 0.464864, 0.113271, 0.700879, 0.179986, 0.803668, 0.513956, 0.548438, 0.207845, 0.784589, 0.526490, 0.571023, 0.422041, 0.721156, 0.073138, 0.594862, 0.861977, 0.448801, 0.652577},
	{0.303473, 0.607440, 0.278902, 0.799562, 0.796169, 0.954087, 0.444338, 0.456883, 0.599817, 0.842622, 0.031200, 0.187270, 0.943594, 0.947922, 0.452984, 0.810833, 0.928879, 0.672717, 0.372332, 0.405696, 0.438824, 0.678649, 0.465070, 0.953264, 0.354698, 0.339021, 0.895860, 0.545434, 0.749284, 0.124877},
	{0.453235, 0.074749, 0.663341, 0.703652, 0.918951, 0.660072, 0.690105, 0.853724, 0.467902, 0.458479, 0.806104, 0.824767, 0.190436, 0.025673, 0.056815, 0.142936, 0.171419, 0.625845, 0.029515, 0.472332, 0.678443, 0.114789, 0.236064, 0.289081, 0.172756, 0.323706, 0.801110, 0.299634, 0.775626, 0.552771},
	{0.554692, 0.730647, 0.773625, 0.900847, 0.138167, 0.794077, 0.189413, 0.028974, 0.127387, 0.133736, 0.128311, 0.935260, 0.273230, 0.942679, 0.638151, 0.872531, 0.367073, 0.236202, 0.187318, 0.545649, 0.255116, 0.305824, 0.015549, 0.587488, 0.962558, 0.849848, 0.007940, 0.634026, 0.359291, 0.114060},
	{0.540818, 0.416421, 0.517098, 0.886123, 0.149396, 0.434677, 0.059039, 0.381030, 0.722369, 0.095119, 0.667190, 0.296401, 0.598563, 0.151852, 0.436377, 0.012682, 0.229023, 0.263680, 0.511385, 0.215085, 0.346110, 0.747817, 0.413619, 0.055753, 0.390028, 0.474484, 0.825321, 0.303644, 0.821790, 0.565680},
	{0.054382, 0.260014, 0.589104, 0.479734, 0.198651, 0.239013, 0.780193, 0.617310, 0.144129, 0.716132, 0.401506, 0.462385, 0.707282, 0.401211, 0.014385, 0.074640, 0.591068, 0.446002, 0.926621, 0.094893, 0.375419, 0.545999, 0.111678, 0.904463, 0.633277, 0.905412, 0.630553, 0.014228, 0.316478, 0.111871},
	{0.629463, 0.060709, 0.673995, 0.477439, 0.305546, 0.516333, 0.707028, 0.813611, 0.315808, 0.311302, 0.344977, 0.666305, 0.861072, 0.761779, 0.875838, 0.871235, 0.172790, 0.850224, 0.959588, 0.770207, 0.875015, 0.067413, 0.646792, 0.324097, 0.640347, 0.879751, 0.373638, 0.766738, 0.168087, 0.519725},
	{0.627456, 0.713914, 0.306396, 0.263687, 0.916004, 0.615034, 0.093175, 0.627697, 0.192028, 0.776965, 0.864501, 0.333582, 0.135414, 0.765467, 0.318614, 0.252380, 0.200075, 0.069010, 0.551911, 0.403812, 0.750116, 0.487184, 0.384786, 0.061409, 0.213691, 0.543873, 0.410645, 0.900963, 0.056290, 0.443509},
	{0.537813, 0.134061, 0.540947, 0.857368, 0.198017, 0.155609, 0.061378, 0.661074, 0.018603, 0.291103, 0.973824, 0.764640, 0.243684, 0.682116, 0.137855, 0.629812, 0.857015, 0.899798, 0.348368, 0.486310, 0.679517, 0.704122, 0.460884, 0.364272, 0.280265, 0.076204, 0.444625, 0.165706, 0.398749, 0.920585},
	{0.511334, 0.914142, 0.091934, 0.993037, 0.096434, 0.313147, 0.785375, 0.602400, 0.465908, 0.298131, 0.133173, 0.295009, 0.166627, 0.317104, 0.109840, 0.832088, 0.971593, 0.218271, 0.706078, 0.039014, 0.616295, 0.669364, 0.037202, 0.003335, 0.142464, 0.862405, 0.276037, 0.531692, 0.522221, 0.567618},
	{0.333033, 0.413417, 0.414348, 0.983922, 0.057739, 0.396543, 0.791321, 0.594185, 0.309563, 0.901803, 0.093127, 0.319027, 0.886962, 0.657432, 0.684517, 0.473949, 0.141244, 0.950925, 0.882626, 0.437439, 0.834957, 0.325143, 0.367639, 0.794839, 0.099309, 0.951782, 0.001474, 0.295396, 0.048455, 0.442740},
	{0.789846, 0.913521, 0.533254, 0.804076, 0.562660, 0.750876, 0.009230, 0.476785, 0.250330, 0.307918, 0.966949, 0.208804, 0.520476, 0.225546, 0.567198, 0.998164, 0.131865, 0.954677, 0.123878, 0.186238, 0.646503, 0.128169, 0.081321, 0.659227, 0.027399, 0.985180, 0.539331, 0.373835, 0.706735, 0.947411},
	{0.382277, 0.692909, 0.602071, 0.775258, 0.591834, 0.376180, 0.850649, 0.225735, 0.796958, 0.996881, 0.281311, 0.710381, 0.664642, 0.414836, 0.498270, 0.949123, 0.953182, 0.732923, 0.384680, 0.040083, 0.582934, 0.564713, 0.355183, 0.880201, 0.624530, 0.624016, 0.295741, 0.074680, 0.293706, 0.234740},
	{0.345897, 0.848490, 0.160364, 0.157864, 0.508659, 0.603301, 0.161397, 0.635454, 0.843941, 0.782269, 0.264566, 0.314699, 0.183196, 0.447473, 0.326679, 0.279816, 0.931764, 0.399692, 0.379423, 0.592846, 0.068507, 0.205238, 0.723618, 0.575148, 0.200233, 0.843480, 0.423730, 0.544751, 0.527967, 0.185108},
	{0.081690, 0.464094, 0.030555, 0.434984, 0.557865, 0.638782, 0.034217, 0.709900, 0.169324, 0.593382, 0.608065, 0.772360, 0.056274, 0.854725, 0.384284, 0.399619, 0.325417, 0.555390, 0.295420, 0.366120, 0.349048, 0.630224, 0.664442, 0.992096, 0.944361, 0.350348, 0.192998, 0.919576, 0.288692, 0.550859},
	{0.919324, 0.090049, 0.257696, 0.427048, 0.577723, 0.899521, 0.218226, 0.967032, 0.433981, 0.784822, 0.525234, 0.331277, 0.431594, 0.717902, 0.916212, 0.890028, 0.134706, 0.119913, 0.893452, 0.653086, 0.040278, 0.504716, 0.894453, 0.385728, 0.292052, 0.234037, 0.200948, 0.380306, 0.594790, 0.268386},
	{0.622443, 0.804567, 0.103971, 0.729240, 0.648590, 0.474655, 0.932912, 0.096444, 0.599107, 0.233565, 0.032328, 0.579859, 0.842198, 0.556897, 0.839883, 0.204952, 0.621255, 0.174021, 0.289540, 0.018503, 0.701496, 0.952091, 0.749009, 0.756727, 0.542089, 0.282063, 0.244875, 0.286318, 0.963134, 0.230695},
	{0.537321, 0.205008, 0.434041, 0.142212, 0.375584, 0.793561, 0.812816, 0.903791, 0.540376, 0.817863, 0.708417, 0.043209, 0.145946, 0.233336, 0.246701, 0.170283, 0.235057, 0.275461, 0.951607, 0.346671, 0.297322, 0.404426, 0.302237, 0.757311, 0.359744, 0.124900, 0.617183, 0.355519, 0.362938, 0.068488},
	{0.867162, 0.457896, 0.077615, 0.904921, 0.281696, 0.613878, 0.661858, 0.200025, 0.959986, 0.665106, 0.541300, 0.868969, 0.557047, 0.021398, 0.482681, 0.807986, 0.736009, 0.572304, 0.008985, 0.718280, 0.449427, 0.659617, 0.753208, 0.804739, 0.029156, 0.779817, 0.567350, 0.076117, 0.251622, 0.133455},
	{0.564474, 0.540981, 0.068921, 0.988431, 0.251095, 0.315473, 0.300657, 0.042039, 0.527901, 0.256022, 0.408710, 0.947513, 0.919281, 0.121244, 0.591945, 0.359652, 0.719307, 0.523551, 0.260843, 0.493079, 0.855836, 0.724406, 0.199110, 0.157286, 0.370476, 0.862272, 0.684763, 0.634198, 0.141323, 0.079302},
	{0.876145, 0.420429, 0.487664, 0.460325, 0.515677, 0.271994, 0.231580, 0.899534, 0.908697, 0.603643, 0.365236, 0.598591, 0.668487, 0.894564, 0.087336, 0.539010, 0.428450, 0.617153, 0.558876, 0.225851, 0.104520, 0.009978, 0.059153, 0.322652, 0.779477, 0.335479, 0.619569, 0.992886, 0.648006, 0.539776},
}

var values = [][]float64{
	{0.379605, 3.831711},
	{0.205181, 4.348205},
	{0.597045, 3.411802},
	{0.489619, 3.747114},
	{0.729036, 3.593810},
	{0.351098, 3.858247},
	{0.006011, 6.131071},
	{0.946916, 3.299703},
	{0.298284, 3.656493},
	{0.286446, 5.095633},
	{0.546977, 4.646740},
	{0.234926, 4.527385},
	{0.768058, 3.319231},
	{0.317805, 4.630410},
	{0.102408, 4.812650},
	{0.052211, 4.936755},
	{0.213778, 4.432924},
	{0.809377, 3.205807},
	{0.606537, 4.200363},
	{0.400883, 4.212855},
	{0.918922, 3.128871},
	{0.633455, 3.795611},
	{0.226045, 4.387719},
	{0.675191, 3.968469},
	{0.982941, 3.370961},
	{0.151869, 4.454190},
	{0.118975, 5.201283},
	{0.720262, 3.645073},
	{0.021930, 4.995038},
	{0.729322, 3.161992},
	{0.862339, 3.777742},
	{0.271453, 4.709412},
	{0.522315, 3.551726},
	{0.933229, 3.576176},
	{0.104253, 4.474008},
	{0.638541, 3.617808},
	{0.331290, 4.256191},
	{0.208522, 4.175122},
	{0.575727, 3.826143},
	{0.652916, 3.662495},
	{0.125325, 4.461730},
	{0.022628, 5.021296},
	{0.510634, 4.138634},
	{0.068978, 4.916304},
	{0.239176, 4.659259},
	{0.840637, 3.587856},
	{0.307044, 3.227613},
	{0.123017, 4.488414},
	{0.215761, 4.915139},
	{0.896829, 2.962306},
	{0.983421, 3.514973},
	{0.060705, 4.582596},
	{0.343208, 4.410310},
	{0.076411, 4.659373},
	{0.338075, 4.015650},
	{0.532783, 4.209460},
	{0.523683, 4.145521},
	{0.625020, 3.658653},
	{0.622305, 3.740288},
	{0.572275, 4.342052},
	{0.447890, 3.949043},
	{0.301147, 3.987566},
	{0.680042, 3.641280},
	{0.547643, 3.375488},
	{0.173772, 4.034062},
	{0.597834, 4.072635},
	{0.194441, 4.602305},
	{0.183337, 4.041717},
	{0.182716, 4.670797},
	{0.492512, 4.223293},
	{0.130652, 4.394415},
	{0.784980, 3.619954},
	{0.345003, 4.214465},
	{0.907799, 3.278743},
	{0.684689, 3.845214},
	{0.357388, 4.105921},
	{0.155461, 4.435050},
	{0.068309, 4.370948},
	{0.327392, 4.310364},
	{0.993428, 2.858435},
	{0.303473, 4.917417},
	{0.453235, 3.545236},
	{0.554692, 3.372434},
	{0.540818, 3.122576},
	{0.054382, 4.421130},
	{0.629463, 4.178018},
	{0.627456, 3.168349},
	{0.537813, 3.502479},
	{0.511334, 3.320044},
	{0.333033, 4.160710},
	{0.789846, 3.437767},
	{0.382277, 4.473920},
	{0.345897, 3.747138},
	{0.081690, 4.722910},
	{0.919324, 3.144199},
	{0.622443, 3.647421},
	{0.537321, 3.139167},
	{0.867162, 3.351555},
	{0.564474, 3.438106},
	{0.876145, 3.229039},
}

func GenerateSampleData() []*MultiResult {
	agents := make([]*MultiResult, len(positions))
	for i := 0; i < len(positions); i++ {
		agents[i] = &MultiResult{
			SingleResult: single.SingleResult{
				Position: positions[i],
				Value:    values[i],
				Idx:      i,
			},
		}
	}

	return agents
}

func TestDECD(t *testing.T) {
	agents := []*MultiResult{
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.659287, 0.006957, 0.015745, 0.001263, 0.003728, 0.001729, 0.019623, 0.003749, 0.008777, 0.008555, 0.003448, 0.005515, 0.002939, 0.007006, 0.007036, 0.007417, 0.001987, 0.005122, 0.006721, 0.002794, 0.008521, 0.007699, 0.003193, 0.007575, 0.008670, 0.004670, 0.000642, 0.006508, 0.000262, 0.043734},
				Value:    []float64{0.659286629317901, 0.227464928198870},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.212394, 0.002241, 0.005072, 0.000407, 0.001201, 0.000557, 0.006322, 0.001208, 0.002828, 0.002756, 0.001111, 0.001777, 0.000947, 0.002257, 0.002267, 0.002389, 0.000640, 0.001650, 0.002165, 0.000900, 0.002745, 0.002480, 0.001029, 0.002440, 0.002793, 0.001504, 0.000207, 0.002097, 0.000085, 0.014089},
				Value:    []float64{0.212394108839969, 0.555442813140720},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.860685, 0.009082, 0.020555, 0.001648, 0.004867, 0.002258, 0.025618, 0.004894, 0.011458, 0.008555, 0.006400, 0.005515, 0.003837, 0.009146, 0.009186, 0.009682, 0.002594, 0.006686, 0.008774, 0.003648, 0.011123, 0.010051, 0.004169, 0.009889, 0.008670, 0.006096, 0.000838, 0.008496, 0.000343, 0.057094},
				Value:    []float64{0.860685151508162, 0.118176636703654},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.038852, 0.000410, 0.000928, 0.000074, 0.001724, 0.000102, 0.001156, 0.000221, 0.000517, 0.000504, 0.000289, 0.000325, 0.000173, 0.000413, 0.000415, 0.000437, 0.000117, 0.000302, 0.000396, 0.000165, 0.000502, 0.000454, 0.000188, 0.000446, 0.000511, 0.000275, 0.000038, 0.000384, 0.000015, 0.002577},
				Value:    []float64{0.0388518765457142, 0.806824693811735},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.066013, 0.000697, 0.000000, 0.000050, 0.000000, 0.000173, 0.000000, 0.000148, 0.000000, 0.000000, 0.000000, 0.000218, 0.000116, 0.000000, 0.000705, 0.000294, 0.000000, 0.000000, 0.000000, 0.000000, 0.000853, 0.000305, 0.000000, 0.000300, 0.000868, 0.000468, 0.000000, 0.000000, 0.000000, 0.000000},
				Value:    []float64{0.0660126987781702, 0.744475577944563},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.114102, 0.001204, 0.002725, 0.000000, 0.005063, 0.000299, 0.000000, 0.000000, 0.001519, 0.001481, 0.000848, 0.000955, 0.000000, 0.001213, 0.001218, 0.001284, 0.000344, 0.000886, 0.001163, 0.000484, 0.001475, 0.001332, 0.000553, 0.001089, 0.000000, 0.000808, 0.000111, 0.000000, 0.000045, 0.000000},
				Value:    []float64{0.114102477660706, 0.668943688510993},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.055294, 0.000583, 0.001321, 0.000106, 0.000313, 0.000145, 0.001646, 0.000314, 0.000736, 0.000717, 0.000289, 0.000463, 0.000247, 0.000588, 0.000590, 0.000622, 0.000167, 0.000430, 0.000564, 0.000234, 0.000715, 0.000646, 0.000268, 0.000635, 0.000727, 0.000392, 0.000054, 0.000546, 0.000022, 0.003668},
				Value:    []float64{0.0552937504749916, 0.769714363785934},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.179786, 0.001897, 0.000000, 0.000344, 0.000000, 0.000018, 0.000000, 0.001022, 0.000000, 0.000000, 0.000000, 0.001504, 0.000802, 0.000000, 0.001919, 0.002023, 0.000000, 0.000000, 0.000000, 0.000000, 0.002324, 0.002099, 0.000000, 0.002066, 0.002364, 0.001273, 0.000000, 0.000000, 0.000000, 0.000000},
				Value:    []float64{0.179785739779001, 0.580797202902654},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.173302, 0.001829, 0.000000, 0.000332, 0.000000, 0.000018, 0.000000, 0.000985, 0.002362, 0.000000, 0.000000, 0.003563, 0.000773, 0.000132, 0.001850, 0.001950, 0.000000, 0.002111, 0.001388, 0.000000, 0.002240, 0.002024, 0.000000, 0.001991, 0.002279, 0.001400, 0.000000, 0.000000, 0.000000, 0.000000},
				Value:    []float64{0.173301575504811, 0.590399260302904},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.538195, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
				Value:    []float64{0.538195324588409, 0.266382030898636},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.662180, 0.002964, 0.001147, 0.011263, 0.003152, 0.005168, 0.008690, 0.000000, 0.002084, 0.003961, 0.002704, 0.000799, 0.000000, 0.010535, 0.000000, 0.000922, 0.001092, 0.010180, 0.000427, 0.007587, 0.010614, 0.000000, 0.000000, 0.002803, 0.000000, 0.005905, 0.003716, 0.000000, 0.005921, 0.003761},
				Value:    []float64{0.662179982252720, 0.205763294342196},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.007843, 0.002964, 0.001147, 0.011263, 0.003152, 0.005168, 0.008690, 0.000000, 0.002084, 0.003961, 0.002704, 0.000799, 0.000000, 0.010535, 0.000000, 0.000922, 0.001092, 0.010180, 0.000427, 0.007587, 0.007150, 0.000000, 0.000000, 0.002803, 0.000000, 0.005905, 0.003716, 0.000000, 0.005921, 0.003761},
				Value:    []float64{0.00784314495447934, 0.941682757081262},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.162868, 0.001719, 0.003890, 0.000312, 0.007226, 0.000427, 0.004848, 0.000926, 0.002168, 0.002113, 0.001211, 0.001362, 0.000726, 0.001731, 0.001738, 0.001832, 0.000491, 0.001265, 0.001660, 0.000690, 0.002105, 0.001902, 0.000789, 0.001555, 0.002142, 0.001154, 0.000159, 0.001608, 0.000065, 0.010804},
				Value:    []float64{0.162867994264164, 0.610968348073376},
			},
		},
		{
			SingleResult: single.SingleResult{
				Position: []float64{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
				Value:    []float64{0, 1},
			},
		},
	}

	agents = DECD(agents, 4)

	// check agents length == 10
	if len(agents) != 10 {
		t.Errorf("Expected agents length to be 10, got %d", len(agents))
	}

	// check values of each agent equal to this matrix
	/* [0.212394108839969;0.555442813140720]
	   [0.860685151508162;0.118176636703654]
	   [0.0388518765457142;0.806824693811735]
	   [0.0660126987781702;0.744475577944563]
	   [0.114102477660706;0.668943688510993]
	   [0.538195324588409;0.266382030898636]
	   [0.662179982252720;0.205763294342196]
	   [0.00784314495447934;0.941682757081262]
	   [0.162867994264164;0.610968348073376]
	   [0;1]
	*/
	matrix := [][]float64{
		{0.212394108839969, 0.555442813140720},
		{0.860685151508162, 0.118176636703654},
		{0.0388518765457142, 0.806824693811735},
		{0.0660126987781702, 0.744475577944563},
		{0.114102477660706, 0.668943688510993},
		{0.538195324588409, 0.266382030898636},
		{0.662179982252720, 0.205763294342196},
		{0.00784314495447934, 0.941682757081262},
		{0.162867994264164, 0.610968348073376},
		{0, 1},
	}

	for i := 0; i < 10; i++ {
		for j := 0; j < 2; j++ {
			if agents[i].Value[j] != matrix[i][j] {
				t.Errorf("Expected value of agent %d at obj %d to be %f, got %f", i, j, matrix[i][j], agents[i].Value[j])
			}
		}

	}
}

func TestDominatesF1False(t *testing.T) {
	agents := GenerateSampleData()
	first, second := agents[0], agents[1]
	if first.Dominates(second) {
		t.Errorf("Expected first agent not to dominate second agent")
	}

	if second.Dominates(first) {
		t.Errorf("Expected second agent not to dominate first agent")
	}
}

func TestDominatesF2False(t *testing.T) {
	agents := GenerateSampleData()
	first, second := agents[1], agents[2]
	if first.Dominates(second) {
		t.Errorf("Expected first agent not to dominate second agent")
	}

	if second.Dominates(first) {
		t.Errorf("Expected second agent not to dominate first agent")
	}
}

func TestDominatesF1True(t *testing.T) {
	agents := GenerateSampleData()
	first, second := agents[8], agents[10]
	if !first.Dominates(second) {
		t.Errorf("Expected first agent to dominate second agent")
	}

	if second.Dominates(first) {
		t.Errorf("Expected second agent not to dominate first agent")
	}
}

func TestDominatesF2True(t *testing.T) {
	agents := GenerateSampleData()
	first, second := agents[10], agents[8]
	if first.Dominates(second) {
		t.Errorf("Expected first agent not to dominate second agent")
	}

	if !second.Dominates(first) {
		t.Errorf("Expected second agent to dominate first agent")
	}
}

func TestDetermineDominationValid(t *testing.T) {
	var dominated = []bool{true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true}
	agents := GenerateSampleData()

	agents = DetermineDomination(agents)

	for i := range dominated {
		if agents[i].Dominated != dominated[i] {
			t.Errorf("Expected agent %d to be dominated %t, got %t", i, dominated[i], agents[i].Dominated)
		}
	}

}

var validValues = [][]float64{
	{0.006011, 6.131071},
	{0.298284, 3.656493},
	{0.052211, 4.936755},
	{0.021930, 4.995038},
	{0.307044, 3.227613},
	{0.896829, 2.962306},
	{0.173772, 4.034062},
	{0.068309, 4.370948},
	{0.993428, 2.858435},
	{0.540818, 3.122576},
	{0.054382, 4.421130},
	{0.537321, 3.139167},
}

func TestDetermineDominationValidLength(t *testing.T) {
	agents := GenerateSampleData()

	agents = DetermineDomination(agents)
	agents = GetNonDominatedAgents(agents)
	if len(agents) != len(validValues) {
		t.Errorf("Expected length of agents to be %d, got %d", len(validValues), len(agents))
	}

}

func TestDetermineDominationValidValues(t *testing.T) {
	agents := GenerateSampleData()

	agents = DetermineDomination(agents)
	agents = GetNonDominatedAgents(agents)

	for i := range validValues {
		for j := range validValues[i] {
			if agents[i].Value[j] != validValues[i][j] {
				t.Errorf("Expected value of agent %d at obj %d to be %f, got %f", i, j, validValues[i][j], agents[i].Value[j])
			}
		}
	}
}

var ranking = []int{2, 2, 3, 2, 4, 2, 0, 5, 0, 7, 7, 4, 2, 5, 4, 0, 3, 2, 6, 4, 1, 6, 3, 7, 6, 2, 5, 6, 0, 1, 7, 6, 2, 5, 1, 4, 3, 2, 4, 6, 1, 1, 4, 2, 5, 5, 0, 2, 5, 0, 7, 1, 4, 2, 2, 6, 5, 5, 4, 7, 3, 1, 5, 2, 0, 5, 3, 1, 3, 5, 1, 5, 3, 4, 7, 3, 2, 0, 3, 0, 7, 1, 2, 0, 0, 6, 1, 2, 1, 2, 4, 5, 1, 3, 2, 4, 0, 3, 3, 3}

var agentsDominationSet = [][]int{
	{10, 18, 19, 23, 42, 55, 56, 59, 60, 65, 69, 74, 85, 91},
	{9, 10, 11, 13, 16, 22, 31, 44, 48, 52, 80, 91},
	{4, 18, 21, 23, 27, 30, 33, 35, 39, 45, 50, 57, 58, 62, 65, 71, 74, 85, 90, 95},
	{10, 18, 21, 23, 30, 38, 42, 55, 56, 59, 65, 69, 74, 85},
	{30, 71},
	{10, 18, 19, 23, 42, 55, 56, 59, 60, 65, 69, 75, 85, 91},
	{},
	{24, 50},
	{0, 3, 5, 10, 13, 18, 19, 21, 23, 30, 36, 38, 39, 42, 52, 54, 55, 56, 57, 58, 59, 60, 61, 65, 69, 72, 74, 75, 78, 80, 85, 89, 91, 92},
	{},
	{},
	{9, 10, 13, 31, 44, 80},
	{24, 30, 33, 45, 50, 71, 90, 97},
	{10},
	{9, 26, 48, 80},
	{9, 26},
	{9, 10, 11, 13, 31, 44, 48, 80, 91},
	{7, 24, 30, 33, 45, 50, 73, 97, 99},
	{},
	{10, 59, 69},
	{7, 24, 33, 50, 94},
	{23, 74},
	{9, 10, 11, 13, 31, 44, 52, 80, 91},
	{},
	{50},
	{9, 10, 11, 13, 31, 44, 48, 66, 68, 80, 91},
	{},
	{30},
	{9, 26, 41},
	{7, 12, 17, 24, 30, 33, 45, 50, 71, 73, 90, 97, 99},
	{},
	{9, 80},
	{4, 10, 18, 21, 23, 27, 30, 33, 35, 38, 39, 45, 55, 56, 57, 58, 59, 62, 65, 71, 74, 85, 95},
	{},
	{9, 10, 11, 13, 26, 31, 44, 47, 48, 66, 68, 80},
	{23, 27, 30, 39, 62, 71, 74},
	{10, 52, 59, 91},
	{9, 10, 11, 13, 16, 18, 19, 22, 31, 36, 44, 48, 52, 55, 59, 69, 72, 78, 80, 85, 91},
	{18, 23, 65, 74, 85},
	{23, 30, 74},
	{9, 10, 11, 13, 31, 44, 48, 66, 68, 80, 91},
	{9, 26},
	{10, 18, 55, 56, 59, 85},
	{9, 26, 80},
	{9, 31, 80},
	{30},
	{0, 2, 3, 4, 5, 7, 10, 12, 13, 18, 19, 21, 23, 24, 27, 30, 32, 33, 35, 36, 38, 39, 42, 45, 50, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 69, 71, 72, 73, 74, 75, 78, 81, 82, 85, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99},
	{9, 10, 11, 13, 31, 44, 48, 66, 68, 80},
	{9, 80},
	{7, 20, 24, 33, 50, 73, 94},
	{},
	{9, 10, 13, 14, 26, 31, 43, 44, 48, 53, 66, 68, 80, 93},
	{10, 91},
	{9, 14, 26, 31, 48, 68, 80, 93},
	{10, 18, 19, 42, 52, 55, 56, 59, 65, 69, 72, 75, 85, 91},
	{10, 59},
	{10, 18, 55, 59, 85},
	{21, 23, 30, 39, 74, 85},
	{21, 23, 30, 74, 85},
	{},
	{10, 18, 23, 42, 55, 56, 59, 65, 69, 85},
	{10, 13, 18, 19, 36, 42, 52, 54, 55, 56, 59, 65, 69, 72, 75, 78, 80, 85, 89, 91},
	{27, 30, 74},
	{2, 4, 18, 21, 23, 27, 30, 33, 35, 38, 39, 45, 50, 57, 58, 59, 62, 65, 71, 74, 85, 90, 95, 98},
	{1, 9, 10, 11, 13, 16, 18, 19, 22, 31, 36, 37, 42, 44, 48, 52, 55, 56, 59, 65, 66, 67, 68, 69, 72, 75, 78, 80, 85, 89, 91},
	{18, 85},
	{9, 10, 13, 31, 44, 48, 80},
	{1, 9, 10, 11, 13, 16, 18, 19, 22, 31, 36, 37, 42, 44, 48, 52, 55, 56, 59, 65, 66, 69, 72, 75, 78, 80, 85, 89, 91},
	{9, 31, 48, 80},
	{10, 59},
	{9, 10, 11, 13, 16, 25, 31, 44, 48, 52, 66, 68, 76, 80, 91},
	{30},
	{10, 59, 69, 91},
	{7, 24, 33, 50},
	{},
	{10, 18, 19, 42, 55, 56, 59, 69, 85, 91},
	{9, 10, 11, 13, 31, 44, 48, 66, 68, 80, 91},
	{9, 10, 11, 13, 14, 16, 22, 25, 26, 31, 34, 40, 43, 44, 47, 48, 52, 53, 66, 68, 70, 76, 80, 91, 93},
	{10, 52, 59, 91},
	{},
	{},
	{3, 4, 10, 18, 21, 23, 27, 30, 32, 33, 35, 38, 39, 42, 45, 55, 56, 57, 58, 59, 62, 65, 69, 71, 74, 85, 95},
	{2, 4, 18, 21, 23, 27, 30, 33, 35, 38, 39, 45, 50, 57, 58, 59, 62, 65, 71, 74, 85, 90, 95, 98},
	{2, 4, 7, 10, 12, 17, 18, 20, 21, 23, 24, 27, 29, 30, 33, 35, 38, 39, 45, 50, 57, 58, 59, 62, 63, 65, 71, 73, 74, 82, 85, 86, 90, 94, 95, 97, 98, 99},
	{9, 10, 11, 13, 14, 16, 25, 26, 31, 34, 40, 43, 44, 47, 48, 51, 53, 66, 68, 76, 80, 91, 93},
	{},
	{4, 7, 12, 17, 21, 23, 24, 27, 30, 33, 35, 39, 45, 50, 62, 71, 73, 74, 85, 90, 97, 99},
	{4, 10, 18, 21, 23, 27, 30, 33, 35, 38, 39, 45, 50, 57, 58, 59, 62, 65, 71, 74, 85, 95},
	{2, 4, 10, 18, 21, 23, 24, 27, 30, 32, 33, 35, 38, 39, 45, 50, 55, 56, 57, 58, 59, 62, 63, 65, 71, 74, 82, 85, 87, 90, 95, 97, 98},
	{10, 18, 19, 52, 55, 59, 69, 72, 85, 91},
	{30, 33, 45, 50},
	{10},
	{0, 5, 10, 18, 19, 21, 23, 30, 38, 42, 55, 56, 59, 60, 65, 69, 74, 75, 85, 91},
	{9, 14, 26, 48, 80},
	{7, 24, 33, 50},
	{21, 23, 30, 39, 57, 74, 85},
	{2, 4, 7, 10, 12, 17, 18, 21, 23, 24, 27, 29, 30, 33, 35, 38, 39, 45, 50, 57, 58, 59, 62, 63, 65, 71, 73, 74, 82, 85, 86, 87, 90, 94, 95, 97, 98, 99},
	{24, 33, 50},
	{4, 18, 21, 23, 27, 30, 33, 35, 38, 39, 45, 50, 57, 58, 59, 62, 65, 71, 74, 85, 95},
	{7, 24, 33, 50, 73},
}

var paretoFrontIndices = [][]int{
	{6, 8, 15, 28, 46, 49, 64, 77, 79, 83, 84, 96},
	{61, 41, 81, 88, 92, 67, 70, 20, 34, 40, 51, 29, 86},
	{54, 3, 32, 63, 82, 87, 0, 5, 1, 37, 89, 25, 76, 94, 47, 43, 53, 12, 17},
	{2, 98, 60, 75, 16, 22, 36, 78, 72, 66, 68, 93, 97, 99},
	{90, 4, 35, 38, 58, 95, 19, 42, 11, 52, 14, 73},
	{45, 62, 71, 65, 57, 69, 56, 13, 44, 91, 26, 48, 7, 33},
	{27, 21, 39, 18, 55, 85, 31, 24},
	{23, 30, 74, 10, 59, 9, 80, 50},
}

func TestNonDominatedSortRank(t *testing.T) {
	agents := GenerateSampleData()
	agents = DetermineDomination(agents)
	agents, _ = NonDominatedSort(agents)

	if len(agents) != len(ranking) {
		t.Errorf("Expected length of agents to be %d, got %d", len(ranking), len(agents))
	}

	for i := range agents {
		if agents[i].Rank != ranking[i] {
			t.Errorf("Expected rank of agent %d to be %d, got %d", i, ranking[i], agents[i].Rank)
		}
	}
}

func TestNonDominatedSortDominationSet(t *testing.T) {
	agents := GenerateSampleData()
	agents = DetermineDomination(agents)
	agents, _ = NonDominatedSort(agents)
	if len(agents) != len(agentsDominationSet) {
		t.Errorf("Expected length of agents to be %d, got %d", len(agentsDominationSet), len(agents))
	}
	for i := range agents {
		if len(agents[i].DominationSet) != len(agentsDominationSet[i]) {
			t.Errorf("Expected length of domination set of agent %d to be %d, got %d", i, len(agentsDominationSet[i]), len(agents[i].DominationSet))
		}

		for j := range agentsDominationSet[i] {
			if agents[i].DominationSet[j] != agentsDominationSet[i][j] {
				t.Errorf("Expected domination set of agent %d to be %d, got %d", i, agentsDominationSet[i][j], agents[i].DominationSet[j])
			}
		}
	}
}

func TestNonDominatedSortParetoFrontRankLength(t *testing.T) {
	agents := GenerateSampleData()
	agents = DetermineDomination(agents)
	_, rankIndices := NonDominatedSort(agents)

	if len(rankIndices) != len(paretoFrontIndices) {
		t.Errorf("Expected length of rank indices to be %d, got %d", len(paretoFrontIndices), len(rankIndices))
	}

}

func TestNonDominatedSortSetEachRank(t *testing.T) {
	agents := GenerateSampleData()
	agents = DetermineDomination(agents)
	_, rankIndices := NonDominatedSort(agents)

	for i := range paretoFrontIndices {
		if len(rankIndices[i]) != len(paretoFrontIndices[i]) {
			t.Errorf("Expected length of rank %d index to be %d, got %d", i, len(paretoFrontIndices[i]), len(rankIndices[i]))
		}
		for j := range rankIndices[i] {
			if rankIndices[i][j] != paretoFrontIndices[i][j] {
				t.Errorf("Expected rank index of agent %d to be %d, got %d", i, paretoFrontIndices[i][j], rankIndices[i][j])
			}
		}
	}
}
